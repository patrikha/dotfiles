;; Variables

;; (include "notifications.yuck")

(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(defpoll clock_time :interval "5s" "date '+\%H\%M \%p'")
(defpoll clock_date :interval "1h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "2h" "date '+%d'")
(defpoll calendar_year :interval "2h" "date '+%Y'")
(defpoll volume_percent :interval "1s"  "amixer get Master | tail -n1 | awk -F ' ' '{print $4}' | tr -d '[%]'")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -n 1")
(defpoll brightness_percent :interval "5s" "light")
{{ if ne .chezmoi.hostname "sesa150507-beast" }}
(defpoll wifi_signal :interval "1m" :initial `N/A` `nmcli -t -f SIGNAL,SSID,ACTIVE device wifi | awk -F':' '{if($3=="yes")print$1}'`)
(defpoll wifi_ssid :interval "1m" :initial `N/A` `nmcli -t -f SIGNAL,SSID,ACTIVE device wifi | awk -F':' '{if($3=="yes")print$2}'`)
{{ end }}
(deflisten workspace "scripts/workspace")
(deflisten appname "scripts/appname")
(defpoll test_value :interval "1s" "date '+%S'")

(defvar power_reveal false)
(defvar control_reveal false)
(defvar br_reveal false)
(defvar vol_reveal false)
(defvar wifi_reveal false)
(defvar time_reveal false)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; widgets

(defwidget workspaces []
  (literal
    :content workspace))

(defwidget power []
  (eventbox
    :onhover "${EWW_CMD} update power_reveal=true"
    :onhoverlost "${EWW_CMD} update power_reveal=false"
    (box
      :orientation "h"
      :class "module-wifi"
      (revealer
        :transition "slideright"
        :reveal power_reveal
        :duration "350ms"
        (box
          :vexpand "false"
          :hexpand "false"
          :orientation "h"
          :space-evenly "false"
          (button
            ;; :class "app-button"
            :onclick "swaylock --clock --indicator --screenshots --effect-scale 0.4 --effect-vignette 0.2:0.5 --effect-blur 4x2"
            :tooltip "lock"
            "")
          (button
            ;; :class "app-button"
            :onclick "systemctl suspend-then-hibernate"
            :tooltip "suspend and hibernate"
            "")
          (button
            ;; :class "app-button"
            :onclick "hyprctl dispatch exit"
            :tooltip "logout"
            "")
          (button
            ;; :class "app-button"
            :onclick "systemctl reboot"
            :tooltip "reboot"
            "")
          (button
            ;; :class "app-button"
            :onclick "systemctl poweroff"
            :tooltip "poweroff"
            "")))
      (label
        :text ""
        :tooltip "power menu"))))

(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
    :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :vexpand "false"
      :hexpand "false"
      (literal
        :content appname)
      (revealer
        :transition "slideright"
        :reveal control_reveal
        :duration "350ms"
        (box
          :vexpand "false"
          :hexpand "false"
          :orientation "h"
          :space-evenly "false"
          (button
            :class "app-button"
            :onclick "hyprctl dispatch togglefloating 1" "")
          (button
            :class "app-button"
            :onclick "hyprctl dispatch fullscreen 1" "")
          (button
            :class "app-button"
            :onclick "hyprctl dispatch killactive 1" ""))))))

(defwidget bright []
  (eventbox
    :onhover "${EWW_CMD} update br_reveal=true"
    :onhoverlost "${EWW_CMD} update br_reveal=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal br_reveal
        :duration "350ms"
        (scale
          :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
          :onchange "light -S {}" ))
      (label
        :text ""
        :class "bright_icon"
        :tooltip "brightness"))))

(defwidget volume []
  (eventbox
    :onhover "${EWW_CMD} update vol_reveal=true"
    :onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
      :class "module-2"
      :space-evenly "false"
      :orientation "h"
      :spacing "3"
      (revealer
        :transition "slideright"
        :reveal vol_reveal
        :duration "350ms"
        (scale
          :class "volbar"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
          :onchange "amixer sset Master {}%" ))
      (button
        :onclick "${EWW_CMD} open --toggle audio_ctl"
        :class "volume_icon"
        {volume_percent == "" ? "" :
          volume_percent == 0 ? "" :
            volume_percent < 51 ? "" :
              volume_percent < 76 ? "" : ""}))))

(defwidget wifi []
  (eventbox
    :onhover "${EWW_CMD} update wifi_reveal=true"
    :onhoverlost "${EWW_CMD} update wifi_reveal=false"
    (box
      :vexpand "false"
      :hexpand "false"
      :space-evenly "false"
      (revealer
        :transition "slideright"
        :reveal wifi_reveal
        :duration "350ms"
        (label
          :class "module_essid"
          :text wifi_ssid))
      (button
        :class "module-wifi"
        :onclick "networkmanager_dmenu"
        {wifi_signal == "" ? "" :
          wifi_signal < 26 ? "" :
            wifi_signal < 51 ? "" :
              wifi_signal < 76 ? "" : ""}))))

(defwidget bat [status capacity]
  (box
    :class "bat_module"
    :vexpand "false"
    :hexpand "false"
    (label
      :text {status == 'Charging' ? "" :
        capacity < 10 ? "" :
          capacity < 25 ? "" :
            capacity < 50 ? "" :
              capacity < 75 ? "" : ""})))

(defwidget mem [used_percent]
  (box
    :class "mem_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value used_percent
      :class "circularbar"
      :thickness 2
      (button
        :onclick "${EWW_CMD} open --toggle mem_ctl"
        :class "circulartext"
        :tooltip "using ${used_percent}% ram"
        "MEM"))))

(defwidget cpu [average_percent]
  (box
    :class "cpu_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value average_percent
      :class "circularbar"
      :thickness 2
      (button
        :onclick "${EWW_CMD} open --toggle cpu_ctl"
        :class "circulartext"
        :tooltip "cpu average usage ${average_percent}%"
        "CPU"))))

(defwidget clock_module []
  (eventbox
    :onhover "${EWW_CMD} update time_reveal=true"
    :onhoverlost "${EWW_CMD} update time_reveal=false"
    (box
      :class "module"
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
        :class "clock_time_class")
        (revealer :transition "slideleft"
          :reveal time_reveal
          :duration "350ms"
          (button
            :class "clock_date_class"
            :onclick "${EWW_CMD} open --toggle calendar" clock_date)))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
      :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
        :text ""))))

(defwidget sep []
  (box
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
      :class "separ"
      :text "|")))

(defwidget gap []
  (box
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width "150"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; define widget groups

(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :class "left_modules"
    ;; (launcher)
    ;; (sep)
    (workspaces)
))

(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    ;;(appnames)
))

(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    ;; (bright)
    (volume)
{{ if ne .chezmoi.hostname "sesa150507-beast" }}
    (wifi)
{{ end }}
{{ if eq .chezmoi.hostname "patrik-zenbook" }}
    ;; (sep)
    (bat :status {EWW_BATTERY.BAT0.status}
         :capacity {EWW_BATTERY.BAT0.capacity})
{{ end }}
    (mem :used_percent {round(EWW_RAM.used_mem_perc, 0)})
    (cpu :average_percent {round(EWW_CPU.avg, 0)})
    ;; (sep)
    (clock_module)
    ;; (power)
    ;; (notif_button)
))

(defwidget bar_layout []
  (centerbox
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; windows

(defwindow bar0
  :monitor 0
  :exclusive false
  :geometry (geometry
    :x "15px"
    :y "0px"
    :width "99%"
    :height "25px"
    :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout))

(defwindow bar1
  :monitor 1
  :exclusive false
  :geometry (geometry
    :x "15px"
    :y "0px"
    :width "99%"
    :height "25px"
    :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout))

(defwindow bar2
  :monitor 2
  :exclusive false
  :geometry (geometry
    :x "15px"
    :y "0px"
    :width "99%"
    :height "25px"
    :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_layout))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tools

(defwidget audio []
  (box
    :class "audio-box"
    :orientation "v"
    :space-evenly "false"
    :vexpand "false"
    :hexpand "false"
    (box
      :halign "v"
      :space-evenly "false"
      :hexpand "false"
      :vexpand "false"
      (box
        :class "speaker_icon"
        :orientation "v")
      (box
        :orientation "v"
        :halign "center"
        :vexpand "false"
        :hexpand "false"
        (label
          :class "speaker_text"
          :text "speaker"
          :valign "center"
          :halign "left")
        (box
          :class "speaker_bar"
          :halign "center"
          :vexpand "false"
          :hexpand "false"
          (scale
            :value volume_percent
            :orientation "h"
            :onchange "amixer -D pulse sset Master {}%"
            :tooltip "volume on ${volume_percent}%"
            :max 100
            :min 0))))
    (label
      :text "_____________________________________"
      :class "audio_sep"
      :halign "center")
    (box
      :halign "v"
      :space-evenly "false"
      :hexpand "false"
      :vexpand "false"
      (box
        :class "mic_icon"
        :orientation "v")
      (box
        :orientation "v"
        :halign "center"
        :vexpand "false"
        :hexpand "false"
        (label
          :class "mic_text"
          :text "mic"
          :valign "center"
          :halign "left")
        (box
          :class "mic_bar"
          :halign "center"
          :vexpand "false"
          :hexpand "false"
          (scale
            :value mic_percent
            :orientation "h"
            :tooltip "mic on ${mic_percent}%"
            :onchange "amixer -D pulse sset Capture {}%"
            :max 100
            :min 0))))))

(defwindow audio_ctl
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry (geometry
    :x "20"
    :y "7%"
    :anchor "top right"
    :width "280px"
    :height "60px")
  (audio))


(defwidget cpu_history []
  (box
    :class "histogram"
    :orientation "v"
    :space-evenly "false"
    :vexpand "false"
    :hexpand "false"
    (label
      :class "histogram_text"
      :text "CPU histogram"
      :valign "center"
      :halign "left")
    (box
      :class "histogram_bar"
      :halign "center"
      :vexpand "false"
      :hexpand "false"
      (graph
        :value {EWW_CPU.avg}
        :time-range "3m"
        :thickness 2
        :max 100
        :min 0))))

(defwindow cpu_ctl
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry (geometry
    :x "20"
    :y "25"
    :anchor "top right"
    :width "280px"
    :height "128px")
  (cpu_history))


(defwidget mem_history []
  (box
    :class "histogram"
    :orientation "v"
    :space-evenly "false"
    :vexpand "false"
    :hexpand "false"
    (label
      :class "histogram_text"
      :text "Memory histogram"
      :valign "center"
      :halign "left")
    (box
      :class "histogram_bar"
      :halign "center"
      :vexpand "false"
      :hexpand "false"
      (graph
        :value {EWW_RAM.used_mem_perc}
        :time-range "3m"
        :thickness 2
        :max 100
        :min 0))))

(defwindow mem_ctl
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry (geometry
    :x "20"
    :y "25"
    :anchor "top right"
    :width "280px"
    :height "128px")
  (mem_history))


(defwidget cal []
  (box
    :class "cal"
    :orientation "v"
    (box
      :class "cal-in"
      (calendar
        :day calendar_day
        :year calendar_year))))

(defwindow calendar
  :stacking "fg"
  :focusable "false"
  :screen 1
  :monitor 0
  :geometry (geometry
    :x "20"
    :y "25"
    :anchor "top right"
    :width "270px"
    :height "60px")
  (cal))
